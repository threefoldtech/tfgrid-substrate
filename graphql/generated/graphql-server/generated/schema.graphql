interface BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModel implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModelUUID implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

input BaseWhereInput {
  id_eq: String
  id_in: [String!]
  createdAt_eq: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdById_eq: String
  updatedAt_eq: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedById_eq: String
  deletedAt_all: Boolean
  deletedAt_eq: String
  deletedAt_lt: String
  deletedAt_lte: String
  deletedAt_gt: String
  deletedAt_gte: String
  deletedById_eq: String
}

"""GraphQL representation of BigInt"""
scalar BigInt

enum CertificationType {
  None
  Silver
  Gold
}

type City implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  countryId: Int!
  name: String!
}

type CityConnection {
  totalCount: Int!
  edges: [CityEdge!]!
  pageInfo: PageInfo!
}

input CityCreateInput {
  countryId: Float!
  name: String!
}

type CityEdge {
  node: City!
  cursor: String!
}

enum CityOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  countryId_ASC
  countryId_DESC
  name_ASC
  name_DESC
}

input CityUpdateInput {
  countryId: Float
  name: String
}

input CityWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  countryId_eq: Int
  countryId_gt: Int
  countryId_gte: Int
  countryId_lt: Int
  countryId_lte: Int
  countryId_in: [Int!]
  name_eq: String
  name_contains: String
  name_startsWith: String
  name_endsWith: String
  name_in: [String!]
}

input CityWhereUniqueInput {
  id: ID!
}

type CommentSearchFTSOutput {
  item: CommentSearchSearchResult!
  rank: Float!
  isTypeOf: String!
  highlight: String!
}

union CommentSearchSearchResult = Transfer

type Country implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  code: String!
  name: String!
}

type CountryConnection {
  totalCount: Int!
  edges: [CountryEdge!]!
  pageInfo: PageInfo!
}

input CountryCreateInput {
  code: String!
  name: String!
}

type CountryEdge {
  node: Country!
  cursor: String!
}

enum CountryOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  code_ASC
  code_DESC
  name_ASC
  name_DESC
}

input CountryUpdateInput {
  code: String
  name: String
}

input CountryWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  code_eq: String
  code_contains: String
  code_startsWith: String
  code_endsWith: String
  code_in: [String!]
  name_eq: String
  name_contains: String
  name_startsWith: String
  name_endsWith: String
  name_in: [String!]
}

input CountryWhereUniqueInput {
  id: ID!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

interface DeleteResponse {
  id: ID!
}

type Entity implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  gridVersion: Int!
  entityId: Int!
  name: String!
  countryId: Int
  cityId: Int
  address: String!
}

type EntityConnection {
  totalCount: Int!
  edges: [EntityEdge!]!
  pageInfo: PageInfo!
}

input EntityCreateInput {
  gridVersion: Float!
  entityId: Float!
  name: String!
  countryId: Float
  cityId: Float
  address: String!
}

type EntityEdge {
  node: Entity!
  cursor: String!
}

enum EntityOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  gridVersion_ASC
  gridVersion_DESC
  entityId_ASC
  entityId_DESC
  name_ASC
  name_DESC
  countryId_ASC
  countryId_DESC
  cityId_ASC
  cityId_DESC
  address_ASC
  address_DESC
}

type EntityProof implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  entityId: Int!
  signature: String!
  twinRel: Twin!
  twinRelId: String!
}

type EntityProofConnection {
  totalCount: Int!
  edges: [EntityProofEdge!]!
  pageInfo: PageInfo!
}

input EntityProofCreateInput {
  entityId: Float!
  signature: String!
  twinRelId: ID!
}

type EntityProofEdge {
  node: EntityProof!
  cursor: String!
}

enum EntityProofOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  entityId_ASC
  entityId_DESC
  signature_ASC
  signature_DESC
  twinRelId_ASC
  twinRelId_DESC
}

input EntityProofUpdateInput {
  entityId: Float
  signature: String
  twinRelId: ID
}

input EntityProofWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  entityId_eq: Int
  entityId_gt: Int
  entityId_gte: Int
  entityId_lt: Int
  entityId_lte: Int
  entityId_in: [Int!]
  signature_eq: String
  signature_contains: String
  signature_startsWith: String
  signature_endsWith: String
  signature_in: [String!]
  twinRelId_eq: ID
  twinRelId_in: [ID!]
}

input EntityProofWhereUniqueInput {
  id: ID!
}

input EntityUpdateInput {
  gridVersion: Float
  entityId: Float
  name: String
  countryId: Float
  cityId: Float
  address: String
}

input EntityWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  gridVersion_eq: Int
  gridVersion_gt: Int
  gridVersion_gte: Int
  gridVersion_lt: Int
  gridVersion_lte: Int
  gridVersion_in: [Int!]
  entityId_eq: Int
  entityId_gt: Int
  entityId_gte: Int
  entityId_lt: Int
  entityId_lte: Int
  entityId_in: [Int!]
  name_eq: String
  name_contains: String
  name_startsWith: String
  name_endsWith: String
  name_in: [String!]
  countryId_eq: Int
  countryId_gt: Int
  countryId_gte: Int
  countryId_lt: Int
  countryId_lte: Int
  countryId_in: [Int!]
  cityId_eq: Int
  cityId_gt: Int
  cityId_gte: Int
  cityId_lt: Int
  cityId_lte: Int
  cityId_in: [Int!]
  address_eq: String
  address_contains: String
  address_startsWith: String
  address_endsWith: String
  address_in: [String!]
}

input EntityWhereUniqueInput {
  id: ID!
}

type ExecutedVestingWithdrawal implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  from: String!
  to: String!
  value: Int!
  txXdr: String!
  block: Int!
}

type ExecutedVestingWithdrawalConnection {
  totalCount: Int!
  edges: [ExecutedVestingWithdrawalEdge!]!
  pageInfo: PageInfo!
}

input ExecutedVestingWithdrawalCreateInput {
  from: String!
  to: String!
  value: Float!
  txXdr: String!
  block: Float!
}

type ExecutedVestingWithdrawalEdge {
  node: ExecutedVestingWithdrawal!
  cursor: String!
}

enum ExecutedVestingWithdrawalOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  from_ASC
  from_DESC
  to_ASC
  to_DESC
  value_ASC
  value_DESC
  txXdr_ASC
  txXdr_DESC
  block_ASC
  block_DESC
}

input ExecutedVestingWithdrawalUpdateInput {
  from: String
  to: String
  value: Float
  txXdr: String
  block: Float
}

input ExecutedVestingWithdrawalWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  from_eq: String
  from_contains: String
  from_startsWith: String
  from_endsWith: String
  from_in: [String!]
  to_eq: String
  to_contains: String
  to_startsWith: String
  to_endsWith: String
  to_in: [String!]
  value_eq: Int
  value_gt: Int
  value_gte: Int
  value_lt: Int
  value_lte: Int
  value_in: [Int!]
  txXdr_eq: String
  txXdr_contains: String
  txXdr_startsWith: String
  txXdr_endsWith: String
  txXdr_in: [String!]
  block_eq: Int
  block_gt: Int
  block_gte: Int
  block_lt: Int
  block_lte: Int
  block_in: [Int!]
}

input ExecutedVestingWithdrawalWhereUniqueInput {
  id: ID!
}

type ExpiredVestingWithdrawal implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  from: String!
  to: String!
  value: Int!
  txXdr: String!
  block: Int!
}

type ExpiredVestingWithdrawalConnection {
  totalCount: Int!
  edges: [ExpiredVestingWithdrawalEdge!]!
  pageInfo: PageInfo!
}

input ExpiredVestingWithdrawalCreateInput {
  from: String!
  to: String!
  value: Float!
  txXdr: String!
  block: Float!
}

type ExpiredVestingWithdrawalEdge {
  node: ExpiredVestingWithdrawal!
  cursor: String!
}

enum ExpiredVestingWithdrawalOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  from_ASC
  from_DESC
  to_ASC
  to_DESC
  value_ASC
  value_DESC
  txXdr_ASC
  txXdr_DESC
  block_ASC
  block_DESC
}

input ExpiredVestingWithdrawalUpdateInput {
  from: String
  to: String
  value: Float
  txXdr: String
  block: Float
}

input ExpiredVestingWithdrawalWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  from_eq: String
  from_contains: String
  from_startsWith: String
  from_endsWith: String
  from_in: [String!]
  to_eq: String
  to_contains: String
  to_startsWith: String
  to_endsWith: String
  to_in: [String!]
  value_eq: Int
  value_gt: Int
  value_gte: Int
  value_lt: Int
  value_lte: Int
  value_in: [Int!]
  txXdr_eq: String
  txXdr_contains: String
  txXdr_startsWith: String
  txXdr_endsWith: String
  txXdr_in: [String!]
  block_eq: Int
  block_gt: Int
  block_gte: Int
  block_lt: Int
  block_lte: Int
  block_in: [Int!]
}

input ExpiredVestingWithdrawalWhereUniqueInput {
  id: ID!
}

type FailedVestingWithdrawal implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  from: String!
  to: String!
  value: Int!
  txXdr: String!
  block: Int!
  reason: String!
}

type FailedVestingWithdrawalConnection {
  totalCount: Int!
  edges: [FailedVestingWithdrawalEdge!]!
  pageInfo: PageInfo!
}

input FailedVestingWithdrawalCreateInput {
  from: String!
  to: String!
  value: Float!
  txXdr: String!
  block: Float!
  reason: String!
}

type FailedVestingWithdrawalEdge {
  node: FailedVestingWithdrawal!
  cursor: String!
}

enum FailedVestingWithdrawalOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  from_ASC
  from_DESC
  to_ASC
  to_DESC
  value_ASC
  value_DESC
  txXdr_ASC
  txXdr_DESC
  block_ASC
  block_DESC
  reason_ASC
  reason_DESC
}

input FailedVestingWithdrawalUpdateInput {
  from: String
  to: String
  value: Float
  txXdr: String
  block: Float
  reason: String
}

input FailedVestingWithdrawalWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  from_eq: String
  from_contains: String
  from_startsWith: String
  from_endsWith: String
  from_in: [String!]
  to_eq: String
  to_contains: String
  to_startsWith: String
  to_endsWith: String
  to_in: [String!]
  value_eq: Int
  value_gt: Int
  value_gte: Int
  value_lt: Int
  value_lte: Int
  value_in: [Int!]
  txXdr_eq: String
  txXdr_contains: String
  txXdr_startsWith: String
  txXdr_endsWith: String
  txXdr_in: [String!]
  block_eq: Int
  block_gt: Int
  block_gte: Int
  block_lt: Int
  block_lte: Int
  block_in: [Int!]
  reason_eq: String
  reason_contains: String
  reason_startsWith: String
  reason_endsWith: String
  reason_in: [String!]
}

input FailedVestingWithdrawalWhereUniqueInput {
  id: ID!
}

type Farm implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  gridVersion: Int!
  farmId: Int!
  name: String!
  twinId: Int!
  pricingPolicyId: Int!
  certificationType: CertificationType!
  countryId: Int
  cityId: Int
}

type FarmConnection {
  totalCount: Int!
  edges: [FarmEdge!]!
  pageInfo: PageInfo!
}

input FarmCreateInput {
  gridVersion: Float!
  farmId: Float!
  name: String!
  twinId: Float!
  pricingPolicyId: Float!
  certificationType: CertificationType!
  countryId: Float
  cityId: Float
}

type FarmEdge {
  node: Farm!
  cursor: String!
}

enum FarmOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  gridVersion_ASC
  gridVersion_DESC
  farmId_ASC
  farmId_DESC
  name_ASC
  name_DESC
  twinId_ASC
  twinId_DESC
  pricingPolicyId_ASC
  pricingPolicyId_DESC
  certificationType_ASC
  certificationType_DESC
  countryId_ASC
  countryId_DESC
  cityId_ASC
  cityId_DESC
}

input FarmUpdateInput {
  gridVersion: Float
  farmId: Float
  name: String
  twinId: Float
  pricingPolicyId: Float
  certificationType: CertificationType
  countryId: Float
  cityId: Float
}

input FarmWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  gridVersion_eq: Int
  gridVersion_gt: Int
  gridVersion_gte: Int
  gridVersion_lt: Int
  gridVersion_lte: Int
  gridVersion_in: [Int!]
  farmId_eq: Int
  farmId_gt: Int
  farmId_gte: Int
  farmId_lt: Int
  farmId_lte: Int
  farmId_in: [Int!]
  name_eq: String
  name_contains: String
  name_startsWith: String
  name_endsWith: String
  name_in: [String!]
  twinId_eq: Int
  twinId_gt: Int
  twinId_gte: Int
  twinId_lt: Int
  twinId_lte: Int
  twinId_in: [Int!]
  pricingPolicyId_eq: Int
  pricingPolicyId_gt: Int
  pricingPolicyId_gte: Int
  pricingPolicyId_lt: Int
  pricingPolicyId_lte: Int
  pricingPolicyId_in: [Int!]
  certificationType_eq: CertificationType
  certificationType_in: [CertificationType!]
  countryId_eq: Int
  countryId_gt: Int
  countryId_gte: Int
  countryId_lt: Int
  countryId_lte: Int
  countryId_in: [Int!]
  cityId_eq: Int
  cityId_gt: Int
  cityId_gte: Int
  cityId_lt: Int
  cityId_lte: Int
  cityId_in: [Int!]
}

input FarmWhereUniqueInput {
  id: ID!
}

type Location implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  longitude: String!
  latitude: String!
  nodelocation: [Node!]
}

type LocationConnection {
  totalCount: Int!
  edges: [LocationEdge!]!
  pageInfo: PageInfo!
}

input LocationCreateInput {
  longitude: String!
  latitude: String!
}

type LocationEdge {
  node: Location!
  cursor: String!
}

enum LocationOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  longitude_ASC
  longitude_DESC
  latitude_ASC
  latitude_DESC
}

input LocationUpdateInput {
  longitude: String
  latitude: String
}

input LocationWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  longitude_eq: String
  longitude_contains: String
  longitude_startsWith: String
  longitude_endsWith: String
  longitude_in: [String!]
  latitude_eq: String
  latitude_contains: String
  latitude_startsWith: String
  latitude_endsWith: String
  latitude_in: [String!]
}

input LocationWhereUniqueInput {
  id: ID!
}

type Node implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  gridVersion: Int!
  nodeId: Int!
  farmId: Int!
  location: Location!
  locationId: String!
  countryId: Int
  cityId: Int
  address: String!
  pubKey: String!
  hru: Int
  sru: Int
  cru: Int
  mru: Int
  role: String!
}

type NodeConnection {
  totalCount: Int!
  edges: [NodeEdge!]!
  pageInfo: PageInfo!
}

input NodeCreateInput {
  gridVersion: Float!
  nodeId: Float!
  farmId: Float!
  locationId: ID!
  countryId: Float
  cityId: Float
  address: String!
  pubKey: String!
  hru: Float
  sru: Float
  cru: Float
  mru: Float
  role: String!
}

type NodeEdge {
  node: Node!
  cursor: String!
}

enum NodeOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  gridVersion_ASC
  gridVersion_DESC
  nodeId_ASC
  nodeId_DESC
  farmId_ASC
  farmId_DESC
  locationId_ASC
  locationId_DESC
  countryId_ASC
  countryId_DESC
  cityId_ASC
  cityId_DESC
  address_ASC
  address_DESC
  pubKey_ASC
  pubKey_DESC
  hru_ASC
  hru_DESC
  sru_ASC
  sru_DESC
  cru_ASC
  cru_DESC
  mru_ASC
  mru_DESC
  role_ASC
  role_DESC
}

input NodeUpdateInput {
  gridVersion: Float
  nodeId: Float
  farmId: Float
  locationId: ID
  countryId: Float
  cityId: Float
  address: String
  pubKey: String
  hru: Float
  sru: Float
  cru: Float
  mru: Float
  role: String
}

input NodeWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  gridVersion_eq: Int
  gridVersion_gt: Int
  gridVersion_gte: Int
  gridVersion_lt: Int
  gridVersion_lte: Int
  gridVersion_in: [Int!]
  nodeId_eq: Int
  nodeId_gt: Int
  nodeId_gte: Int
  nodeId_lt: Int
  nodeId_lte: Int
  nodeId_in: [Int!]
  farmId_eq: Int
  farmId_gt: Int
  farmId_gte: Int
  farmId_lt: Int
  farmId_lte: Int
  farmId_in: [Int!]
  locationId_eq: ID
  locationId_in: [ID!]
  countryId_eq: Int
  countryId_gt: Int
  countryId_gte: Int
  countryId_lt: Int
  countryId_lte: Int
  countryId_in: [Int!]
  cityId_eq: Int
  cityId_gt: Int
  cityId_gte: Int
  cityId_lt: Int
  cityId_lte: Int
  cityId_in: [Int!]
  address_eq: String
  address_contains: String
  address_startsWith: String
  address_endsWith: String
  address_in: [String!]
  pubKey_eq: String
  pubKey_contains: String
  pubKey_startsWith: String
  pubKey_endsWith: String
  pubKey_in: [String!]
  hru_eq: Int
  hru_gt: Int
  hru_gte: Int
  hru_lt: Int
  hru_lte: Int
  hru_in: [Int!]
  sru_eq: Int
  sru_gt: Int
  sru_gte: Int
  sru_lt: Int
  sru_lte: Int
  sru_in: [Int!]
  cru_eq: Int
  cru_gt: Int
  cru_gte: Int
  cru_lt: Int
  cru_lte: Int
  cru_in: [Int!]
  mru_eq: Int
  mru_gt: Int
  mru_gte: Int
  mru_lt: Int
  mru_lte: Int
  mru_in: [Int!]
  role_eq: String
  role_contains: String
  role_startsWith: String
  role_endsWith: String
  role_in: [String!]
}

input NodeWhereUniqueInput {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PricingPolicy implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  gridVersion: Int!
  pricingPolicyId: Int!
  name: String!
  currency: String!
  su: Int!
  cu: Int!
  nu: Int!
}

type PricingPolicyConnection {
  totalCount: Int!
  edges: [PricingPolicyEdge!]!
  pageInfo: PageInfo!
}

input PricingPolicyCreateInput {
  gridVersion: Float!
  pricingPolicyId: Float!
  name: String!
  currency: String!
  su: Float!
  cu: Float!
  nu: Float!
}

type PricingPolicyEdge {
  node: PricingPolicy!
  cursor: String!
}

enum PricingPolicyOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  gridVersion_ASC
  gridVersion_DESC
  pricingPolicyId_ASC
  pricingPolicyId_DESC
  name_ASC
  name_DESC
  currency_ASC
  currency_DESC
  su_ASC
  su_DESC
  cu_ASC
  cu_DESC
  nu_ASC
  nu_DESC
}

input PricingPolicyUpdateInput {
  gridVersion: Float
  pricingPolicyId: Float
  name: String
  currency: String
  su: Float
  cu: Float
  nu: Float
}

input PricingPolicyWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  gridVersion_eq: Int
  gridVersion_gt: Int
  gridVersion_gte: Int
  gridVersion_lt: Int
  gridVersion_lte: Int
  gridVersion_in: [Int!]
  pricingPolicyId_eq: Int
  pricingPolicyId_gt: Int
  pricingPolicyId_gte: Int
  pricingPolicyId_lt: Int
  pricingPolicyId_lte: Int
  pricingPolicyId_in: [Int!]
  name_eq: String
  name_contains: String
  name_startsWith: String
  name_endsWith: String
  name_in: [String!]
  currency_eq: String
  currency_contains: String
  currency_startsWith: String
  currency_endsWith: String
  currency_in: [String!]
  su_eq: Int
  su_gt: Int
  su_gte: Int
  su_lt: Int
  su_lte: Int
  su_in: [Int!]
  cu_eq: Int
  cu_gt: Int
  cu_gte: Int
  cu_lt: Int
  cu_lte: Int
  cu_in: [Int!]
  nu_eq: Int
  nu_gt: Int
  nu_gte: Int
  nu_lt: Int
  nu_lte: Int
  nu_in: [Int!]
}

input PricingPolicyWhereUniqueInput {
  id: ID!
}

type Query {
  cities(offset: Int, limit: Int = 50, where: CityWhereInput, orderBy: CityOrderByInput): [City!]!
  city(where: CityWhereUniqueInput!): City
  citiesConnection(first: Int, after: String, last: Int, before: String, where: CityWhereInput, orderBy: CityOrderByInput): CityConnection!
  countries(offset: Int, limit: Int = 50, where: CountryWhereInput, orderBy: CountryOrderByInput): [Country!]!
  country(where: CountryWhereUniqueInput!): Country
  countriesConnection(first: Int, after: String, last: Int, before: String, where: CountryWhereInput, orderBy: CountryOrderByInput): CountryConnection!
  entityProofs(offset: Int, limit: Int = 50, where: EntityProofWhereInput, orderBy: EntityProofOrderByInput): [EntityProof!]!
  entityProof(where: EntityProofWhereUniqueInput!): EntityProof
  entityProofsConnection(first: Int, after: String, last: Int, before: String, where: EntityProofWhereInput, orderBy: EntityProofOrderByInput): EntityProofConnection!
  entities(offset: Int, limit: Int = 50, where: EntityWhereInput, orderBy: EntityOrderByInput): [Entity!]!
  entity(where: EntityWhereUniqueInput!): Entity
  entitiesConnection(first: Int, after: String, last: Int, before: String, where: EntityWhereInput, orderBy: EntityOrderByInput): EntityConnection!
  executedVestingWithdrawals(offset: Int, limit: Int = 50, where: ExecutedVestingWithdrawalWhereInput, orderBy: ExecutedVestingWithdrawalOrderByInput): [ExecutedVestingWithdrawal!]!
  executedVestingWithdrawal(where: ExecutedVestingWithdrawalWhereUniqueInput!): ExecutedVestingWithdrawal
  executedVestingWithdrawalsConnection(first: Int, after: String, last: Int, before: String, where: ExecutedVestingWithdrawalWhereInput, orderBy: ExecutedVestingWithdrawalOrderByInput): ExecutedVestingWithdrawalConnection!
  expiredVestingWithdrawals(offset: Int, limit: Int = 50, where: ExpiredVestingWithdrawalWhereInput, orderBy: ExpiredVestingWithdrawalOrderByInput): [ExpiredVestingWithdrawal!]!
  expiredVestingWithdrawal(where: ExpiredVestingWithdrawalWhereUniqueInput!): ExpiredVestingWithdrawal
  expiredVestingWithdrawalsConnection(first: Int, after: String, last: Int, before: String, where: ExpiredVestingWithdrawalWhereInput, orderBy: ExpiredVestingWithdrawalOrderByInput): ExpiredVestingWithdrawalConnection!
  failedVestingWithdrawals(offset: Int, limit: Int = 50, where: FailedVestingWithdrawalWhereInput, orderBy: FailedVestingWithdrawalOrderByInput): [FailedVestingWithdrawal!]!
  failedVestingWithdrawal(where: FailedVestingWithdrawalWhereUniqueInput!): FailedVestingWithdrawal
  failedVestingWithdrawalsConnection(first: Int, after: String, last: Int, before: String, where: FailedVestingWithdrawalWhereInput, orderBy: FailedVestingWithdrawalOrderByInput): FailedVestingWithdrawalConnection!
  farms(offset: Int, limit: Int = 50, where: FarmWhereInput, orderBy: FarmOrderByInput): [Farm!]!
  farm(where: FarmWhereUniqueInput!): Farm
  farmsConnection(first: Int, after: String, last: Int, before: String, where: FarmWhereInput, orderBy: FarmOrderByInput): FarmConnection!
  locations(offset: Int, limit: Int = 50, where: LocationWhereInput, orderBy: LocationOrderByInput): [Location!]!
  location(where: LocationWhereUniqueInput!): Location
  locationsConnection(first: Int, after: String, last: Int, before: String, where: LocationWhereInput, orderBy: LocationOrderByInput): LocationConnection!
  nodes(offset: Int, limit: Int = 50, where: NodeWhereInput, orderBy: NodeOrderByInput): [Node!]!
  node(where: NodeWhereUniqueInput!): Node
  nodesConnection(first: Int, after: String, last: Int, before: String, where: NodeWhereInput, orderBy: NodeOrderByInput): NodeConnection!
  pricingPolicies(offset: Int, limit: Int = 50, where: PricingPolicyWhereInput, orderBy: PricingPolicyOrderByInput): [PricingPolicy!]!
  pricingPolicy(where: PricingPolicyWhereUniqueInput!): PricingPolicy
  pricingPoliciesConnection(first: Int, after: String, last: Int, before: String, where: PricingPolicyWhereInput, orderBy: PricingPolicyOrderByInput): PricingPolicyConnection!
  commentSearch(limit: Int = 5, text: String!): [CommentSearchFTSOutput!]!
  transfers(offset: Int, limit: Int = 50, where: TransferWhereInput, orderBy: TransferOrderByInput): [Transfer!]!
  transfer(where: TransferWhereUniqueInput!): Transfer
  transfersConnection(first: Int, after: String, last: Int, before: String, where: TransferWhereInput, orderBy: TransferOrderByInput): TransferConnection!
  twins(offset: Int, limit: Int = 50, where: TwinWhereInput, orderBy: TwinOrderByInput): [Twin!]!
  twin(where: TwinWhereUniqueInput!): Twin
  twinsConnection(first: Int, after: String, last: Int, before: String, where: TwinWhereInput, orderBy: TwinOrderByInput): TwinConnection!
}

type StandardDeleteResponse {
  id: ID!
}

""" All transfers """
type Transfer implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  from: String!
  to: String!
  value: BigInt!
  comment: String
  block: Int!
}

type TransferConnection {
  totalCount: Int!
  edges: [TransferEdge!]!
  pageInfo: PageInfo!
}

input TransferCreateInput {
  from: String!
  to: String!
  value: BigInt!
  comment: String
  block: Float!
}

type TransferEdge {
  node: Transfer!
  cursor: String!
}

enum TransferOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  from_ASC
  from_DESC
  to_ASC
  to_DESC
  value_ASC
  value_DESC
  comment_ASC
  comment_DESC
  block_ASC
  block_DESC
}

input TransferUpdateInput {
  from: String
  to: String
  value: BigInt
  comment: String
  block: Float
}

input TransferWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  from_eq: String
  from_contains: String
  from_startsWith: String
  from_endsWith: String
  from_in: [String!]
  to_eq: String
  to_contains: String
  to_startsWith: String
  to_endsWith: String
  to_in: [String!]
  value_eq: BigInt
  value_gt: BigInt
  value_gte: BigInt
  value_lt: BigInt
  value_lte: BigInt
  value_in: [BigInt!]
  comment_eq: String
  comment_contains: String
  comment_startsWith: String
  comment_endsWith: String
  comment_in: [String!]
  block_eq: Int
  block_gt: Int
  block_gte: Int
  block_lt: Int
  block_lte: Int
  block_in: [Int!]
}

input TransferWhereUniqueInput {
  id: ID!
}

type Twin implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  gridVersion: Int!
  twinId: Int!
  address: String!
  ip: String!
  entityprooftwinRel: [EntityProof!]
}

type TwinConnection {
  totalCount: Int!
  edges: [TwinEdge!]!
  pageInfo: PageInfo!
}

input TwinCreateInput {
  gridVersion: Float!
  twinId: Float!
  address: String!
  ip: String!
}

type TwinEdge {
  node: Twin!
  cursor: String!
}

enum TwinOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  gridVersion_ASC
  gridVersion_DESC
  twinId_ASC
  twinId_DESC
  address_ASC
  address_DESC
  ip_ASC
  ip_DESC
}

input TwinUpdateInput {
  gridVersion: Float
  twinId: Float
  address: String
  ip: String
}

input TwinWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  gridVersion_eq: Int
  gridVersion_gt: Int
  gridVersion_gte: Int
  gridVersion_lt: Int
  gridVersion_lte: Int
  gridVersion_in: [Int!]
  twinId_eq: Int
  twinId_gt: Int
  twinId_gte: Int
  twinId_lt: Int
  twinId_lte: Int
  twinId_in: [Int!]
  address_eq: String
  address_contains: String
  address_startsWith: String
  address_endsWith: String
  address_in: [String!]
  ip_eq: String
  ip_contains: String
  ip_startsWith: String
  ip_endsWith: String
  ip_in: [String!]
}

input TwinWhereUniqueInput {
  id: ID!
}
